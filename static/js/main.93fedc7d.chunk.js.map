{"version":3,"sources":["RenderQuiz.js","App.js","serviceWorker.js","index.js"],"names":["RenderQuiz","props","handleRadioCheck","option","updateChecked","state","map","d","key","question","className","activeItem","description","image","src","url","alt","type","id","name","value","checked","currentChecked","onChange","e","htmlFor","options","onClick","answer","correctAnswer","length","updateActiveItem","updateScore","currentScore","style","color","marginTop","fontSize","App","quizes","checkedRadio","activeQuestion","score","updateRadioState","bind","updateActiveQuestion","startQuiz","this","setState","quizData","yourScore","toString","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93fedc7d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst RenderQuiz = (props) => {\r\n\r\n   const handleRadioCheck = (option) => {\r\n    props.updateChecked(option);\r\n  }\r\n\r\n  const handleNext = (answer) => {\r\n    if (props.activeItem <= props.state.length) {\r\n      props.updateActiveItem(props.activeItem+1);\r\n    }\r\n\r\n      props.updateChecked(\"\");\r\n\r\n    if (props.currentChecked === answer && props.currentChecked !== '') {\r\n      props.updateScore(props.currentScore+1);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n    return (\r\n      props.state.map(d => {\r\n          return(\r\n            <div key={d.question} className={props.activeItem === d.question ? '' : 'hidden'}>\r\n              <b><p>{d.question}. {d.description}</p></b>\r\n                {\r\n                  d.image ? <img src={d.image.url} alt={d.image.description}/>\r\n                : <></>\r\n                }\r\n                   <div>\r\n                    <input type=\"radio\" id=\"option1\" name={d.question} value={d.question}\r\n                      checked={props.currentChecked === \"optionA\" && props.activeItem === d.question}\r\n                      onChange={e => handleRadioCheck(\"optionA\")}\r\n                      />\r\n                      <label htmlFor=\"option1\">{d.options['a']}</label>\r\n                  </div>\r\n                  <div>\r\n                    <input type=\"radio\" id=\"option2\" name={d.question} value={d.question}\r\n                      checked={props.currentChecked === \"optionB\" && props.activeItem === d.question}\r\n                      onChange={e => handleRadioCheck(\"optionB\")}\r\n                      />\r\n                      <label htmlFor=\"option2\">{d.options['b']}</label>\r\n                  </div>\r\n                  <div>\r\n                    <input type=\"radio\" id=\"option3\" name={d.question} value={d.question}\r\n                      checked={props.currentChecked === \"optionC\" && props.activeItem === d.question}\r\n                      onChange={e => handleRadioCheck(\"optionC\")}\r\n                      />\r\n                      <label htmlFor=\"option3\">{d.options['c']}</label>\r\n                  </div>\r\n                  <div>\r\n                    <input type=\"radio\" id=\"option4\" name={d.question} value={d.question}\r\n                      checked={props.currentChecked === \"optionD\" && props.activeItem === d.question}\r\n                      onChange={e => handleRadioCheck(\"optionD\")}\r\n                      />\r\n                      <label htmlFor=\"option4\">{d.options['d']}</label>\r\n                  </div>\r\n\r\n                  <div>\r\n\r\n                    {\r\n                      props.currentChecked !== ''?\r\n                      <button className=\"next-btn btn\" onClick={e => handleNext(d.correctAnswer)}>Siguiente</button>\r\n                      : <></>\r\n                    }\r\n\r\n                </div>\r\n\r\n                <div className=\"pagination\" style={{color: 'yellow', marginTop: '20px', fontSize: '20px'}}>\r\n                  Pregunta {props.activeItem} de {props.state.length}\r\n                </div>\r\n        </div>\r\n          )\r\n        })\r\n    );\r\n  }\r\n\r\nexport default RenderQuiz;\r\n","import React from 'react';\nimport './App.css';\nimport RenderQuiz from './RenderQuiz';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      quizes: [],\n      checkedRadio: '',\n      activeQuestion: 0,\n      score: 0\n    }\n\n    this.updateRadioState = this.updateRadioState.bind(this);\n    this.updateActiveQuestion = this.updateActiveQuestion.bind(this);\n    this.startQuiz = this.startQuiz.bind(this);\n    this.updateScore = this.updateScore.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      quizes: this.props.quizData\n    });\n  }\n\n   updateRadioState(option){\n    this.setState({\n      checkedRadio: option\n    });\n  }\n\n  updateActiveQuestion(question){\n    this.setState({\n     activeQuestion : question\n    });\n  }\n\n  startQuiz(){\n    this.setState({\n      activeQuestion : 1,\n      score: 0\n    });\n  }\n\n  updateScore(score){\n    this.setState({score});\n  }\n\n  render(){\n    const yourScore = (this.state.score / this.state.quizes.length) * 100;\n\n    return (\n      <div className=\"container\">\n\n        {\n          this.state.activeQuestion === 0 ?\n          <div className=\"landing\">\n            <h1>Bienvenido al Quiz</h1>\n            <h3><b>Instrucciones generales:</b></h3>\n\n            <p className=\"instructions\">\n              Selecciona la respuesta correcta y toca \"Siguiente\" para continuar.<br/><br/>\n            El Quiz consta de {this.state.quizes.length} preguntas y al final podrás saber el resultado\n              de la prueba. Muchos Éxitos!\n            </p>\n            <button className=\"start-btn btn\" onClick={this.startQuiz}>Comenzar</button>\n          </div> : <></>\n        }\n\n        <section className=\"question-content\">\n          <RenderQuiz\n            state={this.state.quizes}\n            updateChecked={this.updateRadioState}\n            currentChecked={this.state.checkedRadio}\n            currentScore={this.state.score}\n            updateScore={this.updateScore}\n            activeItem={this.state.activeQuestion}\n            updateActiveItem={this.updateActiveQuestion}\n            />\n        </section>\n\n        {\n          this.state.activeQuestion > this.state.quizes.length ?\n          <>\n            {\n              yourScore >= 70 ?\n              <div className=\"good-score\" style={{color: 'red'}}>\n                Felicidades!! Has pasado el quiz, tu nota es: {yourScore.toString()}%\n              </div>\n              :\n              <div className=\"bad-score\" style={{color: 'red'}}>\n                Lo siento no has aprobado el quiz, tu nota es: {yourScore.toString()}%\n              </div>\n            }\n\n            <button className=\"reset-btn btn\" onClick={this.startQuiz}>Otra Vez</button>\n          </>\n          : <></>\n        }\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//https://www.signupgenius.com/home/trivia-questions-for-kids.cfm\n\nconst data = [\n  {\n    \"question\": 1,\n    \"description\": \"Cuántos minutos hay en una hora?\",\n    \"options\": {\n      \"a\": \"40\",\n      \"b\": \"35\",\n      \"c\": \"60\",\n      \"d\": \"10\"\n    },\n    \"image\": {\n      \"url\" : \"/quiz-app/images/reloj.png\",\n      \"description\" : \"reloj\"\n    },\n    \"correctAnswer\" : \"optionC\"\n  },\n  {\n    \"question\": 2,\n    \"description\": \"Que planeta está mas cerca del sol?\",\n    \"options\": {\n      \"a\": \"Venus\",\n      \"b\": \"Mercurio\",\n      \"c\": \"Tierra\",\n      \"d\": \"Plutón\"\n    },\n    \"correctAnswer\" : \"optionB\"\n  },\n  {\n    \"question\": 3,\n    \"description\": \"Complete: one, two, three, four, five, six, seven, ___ , nine, ten\",\n    \"options\": {\n      \"a\": \"eight\",\n      \"b\": \"eleven\",\n      \"c\": \"three\",\n      \"d\": \"five\"\n    },\n    \"image\": {\n      \"url\" : \"/quiz-app/images/numeros.jpg\",\n      \"description\" : \"numeros\"\n    },\n    \"correctAnswer\" : \"optionA\"\n  },\n  {\n    \"question\": 4,\n    \"description\": \"¿Qué significa que dos palabras sean sinónimos?\",\n    \"options\": {\n      \"a\": \"significan algo diferente\",\n      \"b\": \"que son palabras muy largas\",\n      \"c\": \"que son palabras bonitas\",\n      \"d\": \"tienen un mismo significado pero se escriben diferente.\"\n    },\n    \"correctAnswer\" : \"optionD\"\n  },\n  {\n    \"question\": 5,\n    \"description\": \"Si a 10 le resto 3, cuál es el resultado?\",\n    \"options\": {\n      \"a\": \"7\",\n      \"b\": \"5\",\n      \"c\": \"2\",\n      \"d\": \"8\"\n    },\n    \"correctAnswer\" : \"optionA\"\n  }\n]\n\nReactDOM.render(\n   <App quizData={data}/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}