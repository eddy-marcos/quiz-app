{"version":3,"sources":["RenderQuiz.js","App.js","serviceWorker.js","index.js"],"names":["RenderQuiz","props","handleRadioCheck","option","updateChecked","handleNext","activeItem","state","length","updateActiveItem","updateResult","resetQuiz","map","d","key","question","style","display","description","src","image","url","alt","type","id","name","value","checked","currentChecked","onChange","e","htmlFor","options","className","onClick","event","answer","preventDefault","handleSubmit","correctAnswer","currentResult","App","quizes","checkedRadio","result","activeQuestion","updateRadioState","bind","updateActiveQuestion","this","setState","quizData","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25bbc5c0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst RenderQuiz = (props) => {\r\n\r\n   const handleRadioCheck = (option) => {\r\n    props.updateChecked(option);\r\n  }\r\n\r\n   const handleSubmit = (event, answer) => {\r\n      event.preventDefault();\r\n\r\n      if (props.currentChecked === answer) {\r\n        // console.log('true');\r\n        props.updateResult('Excelente! :)');\r\n        return true;\r\n      }\r\n\r\n      // console.log('false');\r\n      props.updateResult('Intenta de nuevo.');\r\n      return false;\r\n  }\r\n\r\n  const handleNext = () => {\r\n    if (props.activeItem < props.state.length) {\r\n      props.updateActiveItem(props.activeItem+1);\r\n      props.updateResult('');\r\n    }\r\n  }\r\n\r\n  const resetQuiz = () => {\r\n    props.updateActiveItem(1);\r\n    props.updateResult('');\r\n  }\r\n\r\n    return (\r\n      props.state.map(d => {\r\n          return(\r\n            <div key={d.question} style={{display: props.activeItem === d.question ? 'block' : 'none'}}>\r\n              <p>{d.question}. {d.description}</p>\r\n                {\r\n                  d.question === 1 ? <img src={d.image.url} alt={d.image.description}/>\r\n                : <></>\r\n                }\r\n                   <div>\r\n                    <input type=\"radio\" id=\"option1\" name={d.question} value={d.question}\r\n                      checked={props.currentChecked === \"optionA\" && props.activeItem === d.question}\r\n                      onChange={e => handleRadioCheck(\"optionA\")}\r\n                      />\r\n                      <label htmlFor=\"option1\">{d.options['a']}</label>\r\n                  </div>\r\n                  <div>\r\n                    <input type=\"radio\" id=\"option2\" name={d.question} value={d.question}\r\n                      checked={props.currentChecked === \"optionB\" && props.activeItem === d.question}\r\n                      onChange={e => handleRadioCheck(\"optionB\")}\r\n                      />\r\n                      <label htmlFor=\"option2\">{d.options['b']}</label>\r\n                  </div>\r\n                  <div>\r\n                    <input type=\"radio\" id=\"option3\" name={d.question} value={d.question}\r\n                      checked={props.currentChecked === \"optionC\" && props.activeItem === d.question}\r\n                      onChange={e => handleRadioCheck(\"optionC\")}\r\n                      />\r\n                      <label htmlFor=\"option3\">{d.options['c']}</label>\r\n                  </div>\r\n                  <div>\r\n                    <input type=\"radio\" id=\"option4\" name={d.question} value={d.question}\r\n                      checked={props.currentChecked === \"optionD\" && props.activeItem === d.question}\r\n                      onChange={e => handleRadioCheck(\"optionD\")}\r\n                      />\r\n                      <label htmlFor=\"option4\">{d.options['d']}</label>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <button className=\"submit-btn\"\r\n                      onClick={event => handleSubmit(event, d.correctAnswer)}\r\n                      >Listo</button>\r\n                    <button className=\"next-btn\" onClick={handleNext}>Siguiente</button>\r\n                    <button className=\"reset-btn\" onClick={resetQuiz}>Otra Vez</button>\r\n                </div>\r\n                  <span className=\"result\">{props.currentResult}</span>\r\n        </div>\r\n          )\r\n        })\r\n    );\r\n  }\r\n\r\nexport default RenderQuiz;\r\n","import React from 'react';\nimport './App.css';\nimport RenderQuiz from './RenderQuiz';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      quizes: [],\n      checkedRadio: 'optionA',\n      result: '',\n      activeQuestion: 1\n    }\n\n    this.updateRadioState = this.updateRadioState.bind(this);\n    this.updateResult = this.updateResult.bind(this);\n    this.updateActiveQuestion = this.updateActiveQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      quizes: this.props.quizData\n    });\n  }\n\n   updateRadioState(option){\n    this.setState({\n      checkedRadio: option\n    });\n  }\n\n   updateResult(result){\n    this.setState({\n      result\n    });\n  }\n\n  updateActiveQuestion(question){\n    this.setState({\n     activeQuestion : question\n    });\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n       <h1>Bienvenido al Quiz</h1>\n        <section>\n          <p>Selecciona una opci√≥n:</p>\n          <RenderQuiz\n            state={this.state.quizes}\n            updateChecked={this.updateRadioState}\n            currentChecked={this.state.checkedRadio}\n            currentResult={this.state.result}\n            updateResult={this.updateResult}\n            activeItem={this.state.activeQuestion}\n            updateActiveItem={this.updateActiveQuestion}\n            />\n        </section>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//https://www.signupgenius.com/home/trivia-questions-for-kids.cfm\n\nconst data = [\n  {\n    \"question\": 1,\n    \"description\": \"Cu√°ntos minutos hay en una hora?\",\n    \"options\": {\n      \"a\": \"40\",\n      \"b\": \"35\",\n      \"c\": \"60\",\n      \"d\": \"10\"\n    },\n    \"image\": {\n      \"url\" : \"/quiz-app/images/reloj.png\",\n      \"description\" : \"reloj\"\n    },\n    \"correctAnswer\" : \"optionC\"\n  },\n  {\n    \"question\": 2,\n    \"description\": \"Que planeta est√° mas cerca del sol?\",\n    \"options\": {\n      \"a\": \"Venus\",\n      \"b\": \"Mercurio\",\n      \"c\": \"Tierra\",\n      \"d\": \"Plut√≥n\"\n    },\n    \"correctAnswer\" : \"optionB\"\n  },\n  {\n    \"question\": 3,\n    \"description\": \"Complete: one, two, three, four, five, six, seven, ___ , nine, ten\",\n    \"options\": {\n      \"a\": \"eight\",\n      \"b\": \"eleven\",\n      \"c\": \"three\",\n      \"d\": \"five\"\n    },\n    \"correctAnswer\" : \"optionA\"\n  },\n  {\n    \"question\": 4,\n    \"description\": \"¬øQu√© significa que dos palabras sean sin√≥nimos?\",\n    \"options\": {\n      \"a\": \"significan algo diferente\",\n      \"b\": \"que son palabras muy largas\",\n      \"c\": \"que son palabras bonitas\",\n      \"d\": \"tienen un mismo significado pero se escriben diferente.\"\n    },\n    \"correctAnswer\" : \"optionD\"\n  },\n  {\n    \"question\": 5,\n    \"description\": \"Si a 10 le resto 3, cu√°l es el resultado?\",\n    \"options\": {\n      \"a\": \"7\",\n      \"b\": \"5\",\n      \"c\": \"2\",\n      \"d\": \"8\"\n    },\n    \"correctAnswer\" : \"optionA\"\n  }\n]\n\nReactDOM.render(\n   <App quizData={data}/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}